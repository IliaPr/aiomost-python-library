import asyncio
import json
import logging
import ssl
import websockets

from aiomost.mattermost_models.posts.posts_model import MessageEvent
from aiomost.mattermost_models.user.user_added.user_added_models import UserAddedEvent


logging.getLogger('websockets').setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


class MattermostUpdate:
    def __init__(self, event_type: str, data: dict):
        self.event_type = event_type
        self.data = data

    def __str__(self):
        return f"Event: {self.event_type}, Data: {self.data}"

    def to_json(self):
        cleaned_data = self._clean_json(self.data)
        return json.dumps({
            "event_type": self.event_type,
            "data": cleaned_data
        }, ensure_ascii=False, separators=(',', ':'))

    def _clean_json(self, data):
        if isinstance(data, dict):
            return {key: self._clean_json(value) for key, value in data.items()}
        elif isinstance(data, str):
            try:
                return json.loads(data)
            except json.JSONDecodeError:
                return data
        elif isinstance(data, list):
            return [self._clean_json(item) for item in data]
        return data


async def mattermost_ws_listener(routers, ws_url: str, token: str):
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    reconnect_delay = 1

    while True:
        try:
            async with websockets.connect(ws_url, ssl=ssl_context) as ws:
                auth_data = {
                    "seq": 1,
                    "action": "authentication_challenge",
                    "data": {"token": token}
                }
                await ws.send(json.dumps(auth_data))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

                reconnect_delay = 1  # –°–±—Ä–æ—Å –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏

                while True:
                    try:
                        message = await ws.recv()
                        data = json.loads(message)
                        print(data)

                        event_type = data.get("event")
                        if event_type == "user_added":
                            try:
                                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
                                event = UserAddedEvent(**data)
                                for router in routers:
                                    await router.propagate_event(event_type, event)
                            except Exception as e:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è 'user_added': {e}")
                                logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {data}")

                        elif event_type == "posted":
                            try:
                                event = MessageEvent(**data)

                                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                                if (hasattr(event.data.post, 'props') and
                                    event.data.post.props and
                                        event.data.post.props.get("from_bot") == "true"):
                                    logger.debug(
                                        f"ü§ñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞: {event.data.post.id}")
                                    continue

                                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                if hasattr(event.data.post, 'type') and event.data.post.type:
                                    logger.debug(
                                        f"üìã –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '{event.data.post.type}': {event.data.post.id}")
                                    continue

                                for router in routers:
                                    await router.propagate_event(event_type, event)
                            except Exception as e:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è 'posted': {e}")
                                logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {data}")

                        else:
                            try:
                                update = MattermostUpdate(event_type, data)
                                for router in routers:
                                    await router.propagate_event(event_type, update)
                            except Exception as e:
                                logger.error(
                                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è '{event_type}': {e}")
                                logger.debug(f"–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {data}")

                    except json.JSONDecodeError as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        logger.debug(f"–ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    except websockets.ConnectionClosed:
                        # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ –≤–Ω–µ—à–Ω–µ–º –±–ª–æ–∫–µ
                        raise
                    except Exception as e:
                        logger.error(
                            f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        logger.debug(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message if 'message' in locals() else '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å'}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        except websockets.ConnectionClosed as e:
            logger.warning(f"‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            logger.debug(f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except websockets.InvalidURI as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URI WebSocket: {e}")
            logger.error(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL: {ws_url}")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except websockets.InvalidHandshake as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏—è WebSocket: {e}")
            logger.error(
                "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except ssl.SSLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ SSL: {e}")
            logger.error("–ü—Ä–æ–±–ª–µ–º–∞ —Å SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º –∏–ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except ConnectionRefusedError as e:
            logger.error(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {e}")
            logger.error(
                f"–°–µ—Ä–≤–µ—Ä {ws_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except asyncio.TimeoutError as e:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            logger.error("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")
        except Exception as e:
            logger.error(
                f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ WebSocket: {type(e).__name__}: {e}")
            logger.debug(f"–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:", exc_info=True)
            logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥...")

        await asyncio.sleep(reconnect_delay)
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        reconnect_delay = min(reconnect_delay * 2, 60)
