import mimetypes
from typing import Dict, List, Optional
import aiohttp
import httpx

from aiomost.mattermost_models.user.user_info.user_info_models import User


class Mattermost:
    def __init__(self, api_url: str, bot_token: str):
        self.api_url = api_url
        self.bot_token = bot_token
        self.headers = {
            "Authorization": f"Bearer {self.bot_token}",
            "Content-Type": "application/json"
        }

    async def send_request(self, endpoint: str, method: str = 'POST', json_data: Optional[Dict] = None, files: Optional[Dict] = None):
        headers = self.headers.copy()  # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

        if files:  # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã, —É–±–∏—Ä–∞–µ–º Content-Type, —Ç.–∫. httpx —Å–∞–º –¥–æ–±–∞–≤–∏—Ç –Ω—É–∂–Ω—ã–π
            headers.pop("Content-Type", None)

        async with httpx.AsyncClient() as client:
            if method.upper() == 'POST':
                response = await client.post(
                    f"{self.api_url}/{endpoint}",
                    headers=headers,
                    json=json_data if not files else None,
                    files=files
                )
            elif method.upper() == 'PUT':
                response = await client.put(f"{self.api_url}/{endpoint}", headers=headers, json=json_data)
            elif method.upper() == 'DELETE':
                response = await client.delete(f"{self.api_url}/{endpoint}", headers=headers)
            else:
                response = await client.get(
                    f"{self.api_url}/{endpoint}",
                    headers=headers
                )

        if response.status_code != 200:
            response.raise_for_status()
        return response


class MMBot(Mattermost):
    async def reply_message(self, channel_id: str, message_id: str, text: str, actions: Optional[List[Dict]] = None):
        message = {
            "channel_id": channel_id,
            "message": text,
            "root_id": message_id,
            "props": {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if actions:
            message["props"]["attachments"] = [{"actions": actions}]

        response = await self.send_request('api/v4/posts', 'POST', json_data=message)

        if response.status_code == 201:
            pass
            # print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

    async def send_message_with_files(self, channel_id: str, text: str, file_ids: List[str]):
        file_ids_uploaded = []

        async with httpx.AsyncClient() as client:
            for file_id in file_ids:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞ Mattermost
                file_response = await client.get(
                    f"{self.api_url}/api/v4/files/{file_id}",
                    headers={"Authorization": f"Bearer {self.bot_token}"}
                )

                if file_response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å ID {file_id}")
                    continue

                file_content = file_response.content
                content_type = file_response.headers.get(
                    "Content-Type", "application/octet-stream")
                extension = mimetypes.guess_extension(content_type) or ""

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Mattermost
                files = {
                    "files": (f"downloaded_file{extension}", file_content, content_type),
                }
                data = {"channel_id": channel_id}

                upload_response = await client.post(
                    f"{self.api_url}/api/v4/files",
                    headers={"Authorization": f"Bearer {self.bot_token}"},
                    files=files,
                    data=data  # –í `httpx` –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ `data`, –∞ –Ω–µ –≤ `files`
                )

                if upload_response.status_code != 201:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å ID {file_id} –≤ Mattermost")
                    continue

                upload_json = upload_response.json()
                new_file_id = upload_json["file_infos"][0]["id"]
                file_ids_uploaded.append(new_file_id)

            # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if file_ids_uploaded:
                post_data = {
                    "channel_id": channel_id,
                    "message": text,
                    "file_ids": file_ids_uploaded
                }

                post_response = await client.post(
                    f"{self.api_url}/api/v4/posts",
                    headers={
                        "Authorization": f"Bearer {self.bot_token}",
                        "Content-Type": "application/json"
                    },
                    json=post_data
                )

                if post_response.status_code == 201:
                    pass
                    # print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {post_response.status_code}")

            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    async def send_message(self, channel_id: str, text: str, actions: Optional[List[Dict]] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫.
        """
        message = {
            "channel_id": channel_id,
            "message": text,
            "props": {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if actions:
            message["props"]["attachments"] = [{"actions": actions}]

        # print("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", message)  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        response = await self.send_request('api/v4/posts', 'POST', json_data=message)

        if response.status_code == 201:
            pass
            # print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

        return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç API (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ)

    async def update_notification_settings(self, user_id: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        endpoint = f"api/v4/users/{user_id}/patch"
        data = {
            "user_id": user_id,
            "notify_props": {
                "desktop": "all",  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                "desktop_sound": "true",  # –í–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
                "push": "all",  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è push –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                "push_status": "online"  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–Ω–ª–∞–π–Ω
            }
        }

        response = await self.send_request(endpoint, 'PUT', json_data=data)
        # print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {user_id}: {response}")
        return response

    async def edit_message(self, message_id: str, text: str, actions: Optional[List[Dict]] = None):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Mattermost.
        """
        message = {
            "id": message_id,
            "message": text,
            "props": {}
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if actions:
            message["props"]["attachments"] = [{"actions": actions}]

        response = await self.send_request(
            f'api/v4/posts/{message_id}', 'PUT', json_data=message)

        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

    async def get_files_by_ids(self, file_ids: List[str]):
        """ –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Mattermost –ø–æ –∏—Ö ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Ö –¥–∞–Ω–Ω—ã—Ö. """
        files_data = []

        async with httpx.AsyncClient() as client:
            for file_id in file_ids:
                file_response = await client.get(
                    f"{self.api_url}/api/v4/files/{file_id}",
                    headers={"Authorization": f"Bearer {self.bot_token}"}
                )

                if file_response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ —Å ID {file_id}")
                    continue

                file_content = file_response.content
                content_type = file_response.headers.get(
                    "Content-Type", "application/octet-stream")
                extension = mimetypes.guess_extension(content_type) or ".bin"
                filename = f"{file_id}{extension}"

                files_data.append({
                    "filename": filename,
                    "content": file_content,
                    "content_type": content_type
                })

        return files_data  # –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    async def get_user_info(self, user_id: str) -> Optional[User]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ user_id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User.
        """
        endpoint = f"api/v4/users/{user_id}"
        response = await self.send_request(endpoint, 'GET')

        if response.status_code == 200:
            return User(**response.json())  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç User
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def set_user_avatar(self, user_id: str, avatar_url: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –ø–æ —Å—Å—ã–ª–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mattermost.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mattermost
        :param avatar_url: –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Bitrix24
        """
        async with aiohttp.ClientSession() as session:
            async with session.get(avatar_url, ssl=False) as response:
                if response.status != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞: {response.status}")
                    return False

                image_bytes = await response.read()
                content_type = response.headers.get(
                    "Content-Type", "application/octet-stream")
                extension = mimetypes.guess_extension(content_type) or ".jpg"

                files = {
                    "image": (f"avatar{extension}", image_bytes, content_type),
                }

                upload_response = await self.send_request(
                    f"api/v4/users/{user_id}/image", "POST", files=files
                )

                if upload_response.status_code == 200:
                    print("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Mattermost!")
                    return True
                else:
                    print(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {upload_response.text}")
                    return False

    async def get_bot_user_id(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID –±–æ—Ç–∞ –ø–æ –µ–≥–æ —Ç–æ–∫–µ–Ω—É.
        """
        response = await self.send_request('api/v4/users/me', 'GET')

        if response.status_code == 200:
            return response.json().get("id")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None

    async def send_direct_message(self, user_id: str, text: str, actions: Optional[List[Dict]] = None):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Mattermost.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param actions: (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ö–Ω–æ–ø–∫–∏ (–¥–µ–π—Å—Ç–≤–∏—è) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
        """
        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
        bot_user_id = await self.get_bot_user_id()
        if not bot_user_id:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞")
            return None

        # –°–æ–∑–¥–∞—ë–º DM-–∫–∞–Ω–∞–ª
        response = await self.send_request(
            'api/v4/channels/direct', 'POST', json_data=[bot_user_id, user_id]
        )

        if response.status_code != 201:
            print(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DM-–∫–∞–Ω–∞–ª–∞: {response.status_code} {response.text}")
            return None

        channel_id = response.json().get("id")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = {
            "channel_id": channel_id,
            "message": text,
            "props": {}
        }

        if actions:
            message["props"]["attachments"] = [{"actions": actions}]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = await self.send_request('api/v4/posts', 'POST', json_data=message)

        if response.status_code == 201:
            print("‚úÖ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

        return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç API

    async def delete_message(self, message_id: str) -> Optional[str]:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –µ–≥–æ ID.
        """
        response = await self.send_request(f'api/v4/posts/{message_id}', 'DELETE')

        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None

    async def is_channel_admin(self, user_id: str, channel_id: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –≤ Mattermost.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param channel_id: ID –∫–∞–Ω–∞–ª–∞
        :return: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –∏–Ω–∞—á–µ False
        """
        endpoint = f"api/v4/channels/{channel_id}/members/{user_id}"
        response = await self.send_request(endpoint, 'GET')

        if response.status_code == 200:
            roles = response.json().get("roles", "")
            return "channel_admin" in roles.split()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return False

    async def send_ephemeral_message(self, user_id: str, channel_id: str, text: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ñ–µ–º–µ—Ä–Ω–æ–µ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∫–∞–Ω–∞–ª–µ.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param channel_id: ID –∫–∞–Ω–∞–ª–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ.
        :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        message = {
            "user_id": user_id,
            "post": {
                "channel_id": channel_id,
                "message": text
            }
        }

        response = await self.send_request('api/v4/posts/ephemeral', 'POST', json_data=message)

        if response.status_code == 201:
            pass
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

    async def update_user_info(self, user_id: str, data: Dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ Mattermost.
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        """
        endpoint = f"api/v4/users/{user_id}/patch"
        response = await self.send_request(endpoint, 'PUT', json_data=data)

        if response.status_code == 200:
            pass
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")

    async def get_user_by_username(self, username: str) -> Optional[User]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ username –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç User.
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Mattermost.
        :return: –û–±—ä–µ–∫—Ç User –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        endpoint = f"api/v4/users/username/{username}"
        response = await self.send_request(endpoint, 'GET')

        if response.status_code == 200:
            return User(**response.json())  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON –≤ –æ–±—ä–µ–∫—Ç User
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            return None
